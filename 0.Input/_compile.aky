import:
    argparse
    from rmtc.Common.Globals: G

def main():
    # options = parse_args(sys.argv)
    parser = argparse.ArgumentParser(prefix_chars='-')
    parser.add_argument('--print-tokens', action='store_true')
    parser.add_argument('--print-tree-transducer-outputs', action='store_true')
    parser.add_argument('--print-arrangement-outputs', action='store_true')
    parser.add_argument('--print-semantic-analysis-history', action='store_true')
    parser.add_argument('--print-code-generation-history', action='store_true')
    parser.add_argument('--skip-arrangement', action='store_true')
    parser.add_argument('--skip-compilation', action='store_true')
    parser.add_argument('--skip-codegen', action='store_true')
    parser.add_argument('--stdout', action='store_true')
    parser.add_argument('-I', '--include', )
    parser.add_argument('--version', action='version', version='⚑ bootstrap α.1')
    parser.add_argument('file', nargs='+')
    parse = parser.parse_args()


    if parse.print_tokens: G.Options.PRINT_TOKENS = True
    if parse.print_tree_transducer_outputs: G.Options.PRINT_TREE_TRANSDUCER_OUTPUTS = True
    if parse.print_arrangement_outputs:  G.Options.PRINT_ARRANGEMENT_OUTPUTS = True

    options = Record()
    options.print_sa_history = parse.print_semantic_analysis_history
    options.print_cg_history = parse.print_code_generation_history

    options.include_dirs = parse.include.split(":") if parse.include else ["."]

    if len(parse.file) > 1: raise NotImplementedError()
    options.filename = parse.file[0]

    options.arrange = not parse.skip_arrangement
    options.compile = not parse.skip_arrangement and not parse.skip_compilation
    options.codegen = not parse.skip_arrangement and not parse.skip_compilation and not parse.skip_codegen

    if parse.stdout: options.output = "<stdout>"
    else: options.output = "."


    compile(options)



if __name__ == "__main__":
    main()
