print(2*x)

def func(*args, **kwargs):

    subcall(1, 2, *args)

    print(2*args)

[for i in lst: f(i)]

[1, 2, 3]

[f(i) for i in lst]

a = i for i in lst



# in LISP FORM:

    («[]» (for (in i lst) (f i))) # list compr
    («[]» something else  ...) # list

    («{}» (for (in i lst) expr)) # set compr
    («{}» something else ...) # set

    («{}» (for (in i lst) (= expr expr))) # dict compr
    («{}» (= something else) ...) # dict



    (= a (for (in i lst) (f i)))

    («[]» a)


    [f(i) special-for bla bla]

    [1] + [for itm in a:
            for c in itm:
               v1 = ...
               v2 = ... v1 ...
               ... v2 ...]


    def mygenerator():
        for itm in a:
             if itm is something:
                 for c in a:
                     yield ord(c)
             else:
                for c in a:
                    yield ord(c) + 1

    [itm for itm in mygenerator()]

+ a
  if blabla:
    log("blabla was true!")
    1
  else: 2


def subcall():
    if blabla:
        log(...)
        return 1
    else:
        return 2

a + subcall()